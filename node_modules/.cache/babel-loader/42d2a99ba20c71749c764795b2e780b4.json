{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\rishi\\\\OneDrive\\\\Desktop\\\\react\\\\React.js_Redux_banking_system\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n//Reducer! We apply a method based on the action that has been dispatched.\nvar initialState = {\n  balance: 1000,\n  //The arcade has a fixed amount to begn the game with. \n  transactionHistory: []\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var newState = _objectSpread({}, state);\n\n  var date = new Date().toLocaleString();\n\n  if (action.value < state.balace) {\n    //using a switch statement instead of if/else  \n    //receiving and using a payload\n    switch (action.type) {\n      case \"withdraw\":\n        return _objectSpread({}, state, {\n          balance: state.balance - action.value,\n          transactionHistory: state.transactionHistory.concat({\n            date: date,\n            transactionType: 'withdrawl',\n            amount: action.value,\n            newBalance: state.balance - action.value\n          })\n        });\n\n      case \"deposit\":\n        return _objectSpread({}, state, {\n          balance: state.balance + action.value,\n          transactionHistory: state.transactionHistory.concat({\n            date: date,\n            transactionType: 'deposit',\n            amount: action.value,\n            newBalance: state.balance + action.value\n          })\n        });\n\n      default:\n        return newState;\n    }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:\\Users\\rishi\\OneDrive\\Desktop\\react\\React.js_Redux_banking_system\\src\\store\\reducer.js"],"names":["initialState","balance","transactionHistory","reducer","state","action","newState","date","Date","toLocaleString","value","balace","type","concat","transactionType","amount","newBalance"],"mappings":";AAAA;AAEA,IAAMA,YAAY,GAAG;AACpBC,EAAAA,OAAO,EAAE,IADW;AACJ;AAChBC,EAAAA,kBAAkB,EAAE;AAFA,CAArB;;AAKA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AAChD,MAAMC,QAAQ,qBAAOF,KAAP,CAAd;;AAEA,MAAIG,IAAI,GAAG,IAAIC,IAAJ,GAAWC,cAAX,EAAX;;AAGA,MAAIJ,MAAM,CAACK,KAAP,GAAeN,KAAK,CAACO,MAAzB,EAAiC;AAEnC;AACA;AACE,YAAQN,MAAM,CAACO,IAAf;AAEC,WAAK,UAAL;AACD,iCACIR,KADJ;AAECH,UAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACK,KAFjC;AAGCR,UAAAA,kBAAkB,EAAEE,KAAK,CAACF,kBAAN,CAAyBW,MAAzB,CAAgC;AAAEN,YAAAA,IAAI,EAAEA,IAAR;AAAcO,YAAAA,eAAe,EAAE,WAA/B;AAA4CC,YAAAA,MAAM,EAAEV,MAAM,CAACK,KAA3D;AAAkEM,YAAAA,UAAU,EAAEZ,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACK;AAArG,WAAhC;AAHrB;;AAMD,WAAK,SAAL;AACC,iCACIN,KADJ;AAECH,UAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACK,KAFjC;AAGCR,UAAAA,kBAAkB,EAAEE,KAAK,CAACF,kBAAN,CAAyBW,MAAzB,CAAgC;AAAEN,YAAAA,IAAI,EAAEA,IAAR;AAAcO,YAAAA,eAAe,EAAE,SAA/B;AAA0CC,YAAAA,MAAM,EAAEV,MAAM,CAACK,KAAzD;AAAgEM,YAAAA,UAAU,EAAEZ,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACK;AAAnG,WAAhC;AAHrB;;AAKD;AACC,eAAOJ,QAAP;AAhBA;AAiBC;AACF,CA5BD;;AA8BA,eAAeH,OAAf","sourcesContent":["//Reducer! We apply a method based on the action that has been dispatched.\r\n\r\nconst initialState = {\r\n\tbalance: 1000,  //The arcade has a fixed amount to begn the game with. \r\n\ttransactionHistory: []\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  const newState = {...state};\r\n\r\n  let date = new Date().toLocaleString()\r\n\r\n\r\n  if (action.value < state.balace) {\r\n\r\n//using a switch statement instead of if/else  \r\n//receiving and using a payload\r\n  switch (action.type) {\r\n\t\r\n  \tcase \"withdraw\":\r\n\t\treturn { \r\n\t\t\t...state,\r\n\t\t\tbalance: state.balance - action.value,\r\n\t\t\ttransactionHistory: state.transactionHistory.concat({ date: date, transactionType: 'withdrawl', amount: action.value, newBalance: state.balance - action.value })\r\n\t\t}\r\n\t\t\r\n\tcase \"deposit\":\r\n\t\treturn { \r\n\t\t\t...state,\r\n\t\t\tbalance: state.balance + action.value,\r\n\t\t\ttransactionHistory: state.transactionHistory.concat({ date: date, transactionType: 'deposit', amount: action.value, newBalance: state.balance + action.value })\r\n\t\t};\r\n\tdefault:\r\n\t\treturn newState\r\n }}\r\n}\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}