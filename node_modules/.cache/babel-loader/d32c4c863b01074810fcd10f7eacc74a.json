{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\rishi\\\\OneDrive\\\\Desktop\\\\react\\\\React.js_Redux_banking_system\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n//Reducer! We apply a method based on the action that has been dispatched.\nvar FixedBalance = 1000;\nvar initialState = {\n  balance: FixedBalance,\n  //The arcade has a fixed amount to begn the game with. \n  transactionHistory: []\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var newState = _objectSpread({}, state);\n\n  var date = new Date().toLocaleString(); //using a switch statement instead of if/else  \n  //receiving and using a payload\n\n  switch (action.type) {\n    case \"withdraw\":\n      return _objectSpread({}, state, {\n        balance: state.balance - action.value,\n        transactionHistory: state.transactionHistory.concat({\n          date: date,\n          transactionType: 'withdrawl',\n          amount: action.value,\n          newBalance: state.balance - action.value\n        })\n      });\n\n    case \"deposit\":\n      return _objectSpread({}, state, {\n        balance: state.balance + action.value,\n        transactionHistory: state.transactionHistory.concat({\n          date: date,\n          transactionType: 'deposit',\n          amount: action.value,\n          newBalance: state.balance + action.value\n        })\n      });\n\n    default:\n      return newState;\n  }\n};\n\nvar balanceValidator = function balanceValidator(evaluatedBalance, maxAccountBalance) {\n  if (evaluatedBalance < 0 || evaluatedBalance > maxAccountBalance) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:\\Users\\rishi\\OneDrive\\Desktop\\react\\React.js_Redux_banking_system\\src\\store\\reducer.js"],"names":["FixedBalance","initialState","balance","transactionHistory","reducer","state","action","newState","date","Date","toLocaleString","type","value","concat","transactionType","amount","newBalance","balanceValidator","evaluatedBalance","maxAccountBalance"],"mappings":";AAAA;AACA,IAAMA,YAAY,GAAG,IAArB;AAEA,IAAMC,YAAY,GAAG;AACpBC,EAAAA,OAAO,EAAEF,YADW;AACI;AACxBG,EAAAA,kBAAkB,EAAE;AAFA,CAArB;;AAKA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AAChD,MAAMC,QAAQ,qBAAOF,KAAP,CAAd;;AAEA,MAAIG,IAAI,GAAG,IAAIC,IAAJ,GAAWC,cAAX,EAAX,CAHgD,CAKlD;AACA;;AACE,UAAQJ,MAAM,CAACK,IAAf;AAEC,SAAK,UAAL;AACD,+BACIN,KADJ;AAECH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACM,KAFjC;AAGET,QAAAA,kBAAkB,EAAEE,KAAK,CAACF,kBAAN,CAAyBU,MAAzB,CAAgC;AAAEL,UAAAA,IAAI,EAAEA,IAAR;AAAcM,UAAAA,eAAe,EAAE,WAA/B;AAA4CC,UAAAA,MAAM,EAAET,MAAM,CAACM,KAA3D;AAAkEI,UAAAA,UAAU,EAAEX,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACM;AAArG,SAAhC;AAHtB;;AAMD,SAAK,SAAL;AACC,+BACIP,KADJ;AAECH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACM,KAFjC;AAGCT,QAAAA,kBAAkB,EAAEE,KAAK,CAACF,kBAAN,CAAyBU,MAAzB,CAAgC;AAAEL,UAAAA,IAAI,EAAEA,IAAR;AAAcM,UAAAA,eAAe,EAAE,SAA/B;AAA0CC,UAAAA,MAAM,EAAET,MAAM,CAACM,KAAzD;AAAgEI,UAAAA,UAAU,EAAEX,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACM;AAAnG,SAAhC;AAHrB;;AAKD;AACC,aAAOL,QAAP;AAhBA;AAkBD,CAzBD;;AA2BA,IAAMU,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,gBAAD,EAAmBC,iBAAnB,EAAyC;AACjE,MAAID,gBAAgB,GAAG,CAAnB,IAAwBA,gBAAgB,GAAGC,iBAA/C,EAAkE;AACjE,WAAO,KAAP;AACA;;AACD,SAAO,IAAP;AACA,CALD;;AAOA,eAAef,OAAf","sourcesContent":["//Reducer! We apply a method based on the action that has been dispatched.\r\nconst FixedBalance = 1000\r\n\r\nconst initialState = {\r\n\tbalance: FixedBalance,  //The arcade has a fixed amount to begn the game with. \r\n\ttransactionHistory: []\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  const newState = {...state};\r\n\r\n  let date = new Date().toLocaleString()\r\n\r\n//using a switch statement instead of if/else  \r\n//receiving and using a payload\r\n  switch (action.type) {\r\n\t\r\n  \tcase \"withdraw\":\r\n\t\treturn { \r\n\t\t\t...state,\r\n\t\t\tbalance: state.balance - action.value,\r\n\t\t\t\ttransactionHistory: state.transactionHistory.concat({ date: date, transactionType: 'withdrawl', amount: action.value, newBalance: state.balance - action.value })\r\n\t\t};\r\n\t\t\r\n\tcase \"deposit\":\r\n\t\treturn { \r\n\t\t\t...state,\r\n\t\t\tbalance: state.balance + action.value,\r\n\t\t\ttransactionHistory: state.transactionHistory.concat({ date: date, transactionType: 'deposit', amount: action.value, newBalance: state.balance + action.value })\r\n\t\t};\r\n\tdefault:\r\n\t\treturn newState\r\n \t}\r\n}\r\n\r\nconst balanceValidator = (evaluatedBalance, maxAccountBalance) => {\r\n\tif (evaluatedBalance < 0 || evaluatedBalance > maxAccountBalance) {\r\n\t\treturn false\r\n\t}\r\n\treturn true\r\n}\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}